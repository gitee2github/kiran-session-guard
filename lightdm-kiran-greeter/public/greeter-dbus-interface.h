/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.kylinsec.Kiran.SystemDaemon.Greeter.xml -p GreeterDBusInterface
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef GREETERDBUSINTERFACE_H
#define GREETERDBUSINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.kylinsec.Kiran.SystemDaemon.Greeter
 */
class GreeterDBusInterface : public QDBusAbstractInterface
{
Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.kylinsec.Kiran.SystemDaemon.Greeter"; }
    static inline const char *staticInterfacePath()
    { return "/com/kylinsec/Kiran/SystemDaemon/Greeter"; }

public:
    GreeterDBusInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~GreeterDBusInterface();

    Q_PROPERTY(bool allow_manual_login READ allow_manual_login)
    inline bool allow_manual_login() const
    { return qvariant_cast< bool >(property("allow_manual_login")); }

    Q_PROPERTY(qulonglong autologin_timeout READ autologin_timeout)
    inline qulonglong autologin_timeout() const
    { return qvariant_cast< qulonglong >(property("autologin_timeout")); }

    Q_PROPERTY(QString autologin_user READ autologin_user)
    inline QString autologin_user() const
    { return qvariant_cast< QString >(property("autologin_user")); }

    Q_PROPERTY(QString background READ background)
    inline QString background() const
    { return qvariant_cast< QString >(property("background")); }

    Q_PROPERTY(bool hide_user_list READ hide_user_list)
    inline bool hide_user_list() const
    { return qvariant_cast< bool >(property("hide_user_list")); }

    Q_PROPERTY(ushort scale_factor READ scale_factor)
    inline ushort scale_factor() const
    { return qvariant_cast< ushort >(property("scale_factor")); }

    Q_PROPERTY(ushort scale_mode READ scale_mode)
    inline ushort scale_mode() const
    { return qvariant_cast< ushort >(property("scale_mode")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> SetAllowManualLogin(bool allow)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(allow);
        return asyncCallWithArgumentList(QStringLiteral("SetAllowManualLogin"), argumentList);
    }

    inline QDBusPendingReply<> SetAutologinTimeout(qulonglong seconds)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(seconds);
        return asyncCallWithArgumentList(QStringLiteral("SetAutologinTimeout"), argumentList);
    }

    inline QDBusPendingReply<> SetAutologinUser(const QString &user_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(user_name);
        return asyncCallWithArgumentList(QStringLiteral("SetAutologinUser"), argumentList);
    }

    inline QDBusPendingReply<> SetBackground(const QString &file_path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(file_path);
        return asyncCallWithArgumentList(QStringLiteral("SetBackground"), argumentList);
    }

    inline QDBusPendingReply<> SetHideUserList(bool hide)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(hide);
        return asyncCallWithArgumentList(QStringLiteral("SetHideUserList"), argumentList);
    }

    inline QDBusPendingReply<> SetScaleMode(ushort mode, ushort factor)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(mode) << QVariant::fromValue(factor);
        return asyncCallWithArgumentList(QStringLiteral("SetScaleMode"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
namespace kylinsec {
namespace Kiran {
namespace SystemDaemon {
typedef ::GreeterDBusInterface Greeter;
}
}
}
}
#endif