/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p AccountsInterface com.unikylin.Kiran.SystemDaemon.Accounts.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ACCOUNTSINTERFACE_H_1602294727
#define ACCOUNTSINTERFACE_H_1602294727

#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QObject>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.kylinsec.Kiran.SystemDaemon.Accounts
 */

class AccountsInterface : public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    {
        return "com.kylinsec.Kiran.SystemDaemon.Accounts";
    }

public:
    AccountsInterface(const QDBusConnection &connection, QObject *parent = 0);

    ~AccountsInterface();

public Q_SLOTS:  // METHODS
    inline QDBusPendingReply<QDBusObjectPath>
    CreateUser(const QString &name, const QString &realname, int account_type, qint64 uid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name) << QVariant::fromValue(realname) << QVariant::fromValue(account_type)
                     << uid;
        return asyncCallWithArgumentList(QLatin1String("CreateUser"), argumentList);
    }

    inline QDBusPendingReply<> DeleteUser(qulonglong uid, bool remove_files)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uid) << QVariant::fromValue(remove_files);
        return asyncCallWithArgumentList(QLatin1String("DeleteUser"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> FindUserById(qulonglong uid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uid);
        return asyncCallWithArgumentList(QLatin1String("FindUserById"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> FindUserByName(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("FindUserByName"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > GetNonSystemUsers()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetNonSystemUsers"), argumentList);
    }

Q_SIGNALS:  // SIGNALS
    void UserAdded(const QDBusObjectPath &user);
    void UserDeleted(const QDBusObjectPath &user);
};

namespace com
{
namespace kylinsec
{
namespace Kiran
{
namespace SystemDaemon
{
typedef ::AccountsInterface AccountsInterface;
}
}  // namespace Kiran
}  // namespace kylinsec
}  // namespace com
#endif
